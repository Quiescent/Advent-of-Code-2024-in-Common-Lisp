(defpackage 2024-day-20
  (:use :cl :iterate :cl-ppcre :metabang-bind :trivia :trivia.ppcre)
  (:shadowing-import-from :arrow-macros :->>))
(in-package 2024-day-20)
(neat-lambda:enable-lambda-syntax)
(currying:enable-currying-syntax)

(defun read-problem ()
  (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2024 "src/2024-day-20.in"))
    (labels ((recur ()
               (bind ((line (read-line f nil nil)))
                 (when line
                   (cons line (recur))))))
      (map 'vector #'identity (recur)))))

(defun grid-distance (grid start end)
  (bind ((dists (make-hash-table :test #'equal))
         (seen (make-hash-table :test #'equal))
         (xs (queues:make-queue :simple-queue))
         (directions (list #c(1 0) #c(-1 0) #c(0 1) #c(0 -1)))
         (y-bound (length grid))
         (x-bound (length (aref grid 0))))
    (labels ((in-bounds (c)
               (and (>= (realpart c) 0)
                    (>= (imagpart c) 0)
                    (< (realpart c) x-bound)
                    (< (imagpart c) y-bound)))
             (grid-get (c)
               (aref (aref grid (imagpart c))
                     (realpart c))))
      (setf (gethash start dists) 0)
      (setf (gethash start seen) t)
      (queues:qpush xs start)
      (iter outer
        (for x = (queues:qpop xs))
        (for dist = (gethash x dists))
        (while x)
        (iter
          (for d in directions)
          (for nx = (+ x d))
          (when (and (in-bounds nx)
                     (not #1=(gethash nx seen)))
            (bind ((ns (grid-get nx)))
              (when (not (char-equal ns #\#))
                (setf #1# t)
                (setf (gethash nx dists) (1+ dist))
                (when (= nx end)
                  (return-from outer))
                (queues:qpush xs nx))))))
      dists)))

(defun grid-race (grid start end)
  (bind ((dists (grid-distance grid start end))
         (dists-from (all-points-shortest-distance-2 grid end))
         (init-dist (gethash end dists))
         (seen (make-hash-table :test #'equal))
         (xs (queues:make-queue :simple-queue))
         (directions (list #c(1 0) #c(-1 0) #c(0 1) #c(0 -1)))
         (y-bound (length grid))
         (x-bound (length (aref grid 0))))
    (format t "init-dist: ~a~%" init-dist)
    (labels ((in-bounds (c)
               (and (>= (realpart c) 0)
                    (>= (imagpart c) 0)
                    (< (realpart c) x-bound)
                    (< (imagpart c) y-bound)))
             (grid-get (c)
               (aref (aref grid (imagpart c))
                     (realpart c))))
      (queues:qpush xs start)
      (iter outer
        (for x = (queues:qpop xs))
        (for dist = (gethash x dists))
        (while x)
        (iter
          (for d in directions)
          (for nx = (+ x d))
          (if (= nx end)
              (next-iteration)
              (when (and (in-bounds nx)
                         (not #1=(gethash nx seen)))
                (bind ((ns (grid-get nx)))
                  (cond
                    ((and (char-equal ns #\#)
                          (in-bounds (+ nx d))
                          (char-equal (grid-get (+ nx d)) #\#)
                          (in-bounds (+ nx d d))
                          (not (char-equal (grid-get (+ nx d d)) #\#)))
                     (if (and (= (+ nx d d) end)
                              (= (+ dist 3) 64))
                         (in outer (collecting (cons nx (+ nx d d))))
                         (when (>= (- init-dist (+ dist 3 (gethash (+ nx d d) dists-from))) 100)
                           (in outer (collecting (cons nx (+ nx d d)))))))
                    ((and (char-equal ns #\#)
                          (in-bounds (+ nx d))
                          (not (char-equal (grid-get (+ nx d)) #\#)))
                     (if (and (= (+ nx d) end)
                              (= (+ dist 2) 64))
                         (in outer (collecting (cons nx (+ nx d))))
                         (when (>= (- init-dist (+ dist 2 (gethash (+ nx d) dists-from))) 100)
                           (gethash end (grid-distance grid (+ nx d) end))
                           (in outer (collecting (cons nx (+ nx d)))))))
                    ((char-equal ns #\.)
                     (progn
                       (setf (gethash nx seen) t)
                       (queues:qpush xs nx))))))))))))

(defun find-square (grid square)
  (iter outer
    (for y from 0 below (length grid))
    (for row in-vector grid)
    (iter
      (for x from 0 below (length row))
      (for s in-string row)
      (when (char-equal s square)
        (return-from outer (complex x y))))))

(defun part-1 ()
  (bind ((grid (read-problem))
         (start (find-square grid #\S))
         (end (find-square grid #\E)))
    (length (remove-duplicates (grid-race grid start end) :test #'equal))))

;; Correct: 1406

(defun manhattan (c1 c2)
  (bind ((res (- c1 c2)))
    (+ (abs (realpart res))
       (abs (imagpart res)))))

(defun all-points-shortest-distance-2 (grid start)
  (bind ((dists (make-hash-table :test #'equal))
         (seen (make-hash-table :test #'equal))
         (xs (queues:make-queue :simple-queue))
         (directions (list #c(1 0) #c(-1 0) #c(0 1) #c(0 -1)))
         (y-bound (length grid))
         (x-bound (length (aref grid 0))))
    (labels ((in-bounds (c)
               (and (>= (realpart c) 0)
                    (>= (imagpart c) 0)
                    (< (realpart c) x-bound)
                    (< (imagpart c) y-bound)))
             (grid-get (c)
               (aref (aref grid (imagpart c))
                     (realpart c))))
      (setf (gethash start dists) 0)
      (setf (gethash start seen) t)
      (queues:qpush xs start)
      (iter outer
        (for x = (queues:qpop xs))
        (for dist = (gethash x dists))
        (while x)
        (iter
          (for d in directions)
          (for nx = (+ x d))
          (when (and (in-bounds nx)
                     (not #1=(gethash nx seen)))
            (bind ((ns (grid-get nx)))
              (when (not (char-equal ns #\#))
                (setf #1# t)
                (setf (gethash nx dists) (1+ dist))
                (queues:qpush xs nx))))))
      dists)))

(defun grid-race-2 (grid start end)
  (bind ((dists (grid-distance grid start end))
         (dists-from (all-points-shortest-distance-2 grid end))
         (init-dist (gethash end dists))
         (seen (make-hash-table :test #'equal))
         (xs (queues:make-queue :simple-queue))
         (directions (list #c(1 0) #c(-1 0) #c(0 1) #c(0 -1)))
         (y-bound (length grid))
         (x-bound (length (aref grid 0))))
    (format t "init-dist: ~a~%" init-dist)
    (labels ((in-bounds (c)
               (and (>= (realpart c) 0)
                    (>= (imagpart c) 0)
                    (< (realpart c) x-bound)
                    (< (imagpart c) y-bound)))
             (grid-get (c)
               (aref (aref grid (imagpart c))
                     (realpart c))))
      (queues:qpush xs start)
      (iter outer
        (for x = (queues:qpop xs))
        (for dist = (gethash x dists))
        (while x)
        (iter
          (for d in directions)
          (for nx = (+ x d))
          (if (= nx end)
              (next-iteration)
              (when (and (in-bounds nx)
                         (not #1=(gethash nx seen)))
                (bind ((ns (grid-get nx)))
                  (iter
                    (for (coord dist-from) in-hashtable dists-from)
                    (for travel-time = (manhattan coord x))
                    (when (> travel-time 20)
                      (next-iteration))
                    (for n-dist = (+ dist travel-time dist-from))
                    (when (>= (- init-dist n-dist) 100)
                      (in outer (collecting (cons x coord)))))
                  (when (char-equal ns #\.)
                    (progn
                      (setf (gethash nx seen) t)
                      (queues:qpush xs nx)))))))))))

(defun part-2 ()
  (bind ((grid (read-problem))
         (start (find-square grid #\S))
         (end (find-square grid #\E)))
    (length (remove-duplicates (grid-race-2 grid start end) :test #'equal))))

;; Correct: 1006101
