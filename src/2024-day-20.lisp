(defpackage 2024-day-20
  (:use :cl :iterate :cl-ppcre :metabang-bind :trivia :trivia.ppcre)
  (:shadowing-import-from :arrow-macros :->>))
(in-package 2024-day-20)
(neat-lambda:enable-lambda-syntax)
(currying:enable-currying-syntax)

(defun read-problem ()
  (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2024 "src/2024-day-20.in"))
    (labels ((recur ()
               (bind ((line (read-line f nil nil)))
                 (when line
                   (cons line (recur))))))
      (map 'vector #'identity (recur)))))

(defun grid-distance (grid start end)
  (bind ((seen (make-hash-table :test #'equal))
         (xs (queues:make-queue :simple-queue))
         (directions (list #c(1 0) #c(-1 0) #c(0 1) #c(0 -1)))
         (y-bound (length grid))
         (x-bound (length (aref grid 0))))
    (labels ((in-bounds (c)
               (and (>= (realpart c) 0)
                    (>= (imagpart c) 0)
                    (< (realpart c) x-bound)
                    (< (imagpart c) y-bound)))
             (grid-get (c)
               (aref (aref grid (imagpart c))
                     (realpart c))))
      (queues:qpush xs (cons start 0))
      (iter outer
        (for (x . dist) = (queues:qpop xs))
        (while x)
        (iter
          (for d in directions)
          (for nx = (+ x d))
          (if (= nx end)
              (return-from outer (1+ dist))
              (when (and (in-bounds nx)
                         (not #1=(gethash nx seen)))
                (bind ((ns (grid-get nx)))
                  (when (not (char-equal ns #\#))
                    (setf #1# t)
                    (queues:qpush xs (cons nx (1+ dist))))))))))))

(defun grid-race (grid start end)
  (bind ((layer-1-from (make-hash-table :test #'equal))
         (layer-2-from (make-hash-table :test #'equal))
         (layer-1-seen (make-hash-table :test #'equal))
         (layer-2-seen (make-hash-table :test #'equal))
         (xs (queues:make-queue :simple-queue))
         (ys (queues:make-queue :simple-queue))
         (directions (list #c(1 0) #c(-1 0) #c(0 1) #c(0 -1)))
         (y-bound (length grid))
         (x-bound (length (aref grid 0))))
    (labels ((in-bounds (c)
               (and (>= (realpart c) 0)
                    (>= (imagpart c) 0)
                    (< (realpart c) x-bound)
                    (< (imagpart c) y-bound)))
             (grid-get (c)
               (aref (aref grid (imagpart c))
                     (realpart c))))
      (queues:qpush xs start)
      (iter
        (for x = (queues:qpop xs))
        (while x)
        (iter
          (for d in directions)
          (for nx = (+ d x))
          (when (and (in-bounds nx)
                     (not #1=(gethash nx layer-1-seen)))
            (bind ((ns (grid-get nx)))
              (setf #1# t)
              (setf (gethash nx layer-1-from) x)
              (cond
                ((char-equal ns #\E) t)
                ((and (char-equal ns #\#)
                      (in-bounds (+ nx d))
                      (char-equal (grid-get (+ nx d)) #\#)
                      (in-bounds (+ nx d d))
                      (char-equal (grid-get (+ nx d d)) #\.)
                      (not (gethash (+ nx d d) layer-2-seen)))
                 (progn
                   (setf (gethash (+ nx d d) layer-2-seen) t)
                   (setf (gethash (+ nx d d) layer-2-from) x)
                   (queues:qpush ys (+ nx d d))))
                ((and (char-equal ns #\#)
                      (in-bounds (+ nx d))
                      (char-equal (grid-get (+ nx d)) #\.)
                      (not (gethash (+ nx d) layer-2-seen)))
                 (progn
                   (setf (gethash (+ nx d) layer-2-seen) t)
                   (setf (gethash (+ nx d) layer-2-from) x)
                   (queues:qpush ys (+ nx d))))
                ((char-equal ns #\.)
                 (progn
                   (setf (gethash nx layer-1-seen) t)
                   (queues:qpush xs nx))))))))
      (iter
        (for y = (queues:qpush ys))
        (while y)
        (iter
          (for d in directions)
          (for ny = (+ d y))
          (when (and (in-bounds ny)
                     (not #2=(gethash ny layer-2-seen)))
            (bind ((ns (grid-get ny)))
              (when (char-equal ns #\.)
                (setf #2# t)
                (setf (gethash ny layer-2-from) y)
                (queues:qpush ys ny)))))))))

(defun find-square (grid square)
  (iter outer
    (for y from 0 below (length grid))
    (for row in-vector grid)
    (iter
      (for x from 0 below (length row))
      (for s in-string row)
      (when (char-equal s square)
        (return-from outer (complex x y))))))

(defun part-1 ()
  (bind ((grid (read-problem))
         (start (find-square grid #\S))
         (end (find-square grid #\E)))
    (grid-distance grid start end)
    ;; (grid-race grid start end)
    ))
