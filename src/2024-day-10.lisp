(defpackage 2024-day-10
  (:use :cl :iterate :cl-ppcre :metabang-bind :trivia :trivia.ppcre)
  (:shadowing-import-from :arrow-macros :->>))
(in-package 2024-day-10)
(neat-lambda:enable-lambda-syntax)
(currying:enable-currying-syntax)

(defun read-problem ()
  (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2024 "src/2024-day-10.in"))
    (labels ((recur ()
               (bind ((line (read-line f nil nil)))
                 (when line
                   (cons (map 'vector #'digit-char-p line) (recur))))))
      (map 'vector #'identity (recur)))))

(defun find-heads (grid)
  (iter outer
    (for y from 0 below (length grid))
    (for row = (aref grid y))
    (iter
      (for x from 0 below (length row))
      (for h = (aref row x))
      (when (= 0 h)
        (in outer (collecting (complex x y)))))))

(defun score-head (head grid)
  (bind ((x-bound (length (aref grid 0)))
         (y-bound (length grid))
         (deltas '(#c(1 0) #c(-1 0) #c(0 1) #c(0 -1)))
         (found nil))
    (labels ((grid-get (c)
               (aref (aref grid (imagpart c))
                     (realpart c)))
             (in-bounds (c)
               (and (>= (realpart c) 0)
                    (>= (imagpart c) 0)
                    (< (realpart c) x-bound)
                    (< (imagpart c) y-bound)))
             (recur (c)
               (bind ((h (grid-get c)))
                 (if (= 9 h)
                     (push c found)
                     (iter
                       (for delta in deltas)
                       (for new-c = (+ c delta))
                       (when (in-bounds new-c)
                         (bind ((new-h (grid-get new-c)))
                           (when (= 1 (- new-h h))
                             (recur new-c)))))))))
      (recur head)
      found)))

(defun part-1 ()
  (bind ((grid (read-problem))
         (heads (find-heads grid)))
    (->> (mapcar #l(score-head %1 grid) heads)
      (mapcar #'remove-duplicates)
      (mapcar #'length)
      (apply #'+))))

(defun part-2 ()
  (bind ((grid (read-problem))
         (heads (find-heads grid)))
    (->> (mapcar #l(score-head %1 grid) heads)
      (mapcar #'length)
      (apply #'+))))
